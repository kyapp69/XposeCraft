{
  "name": "XposeCraft API Test",
  "tagline": "Tutorial for the XposeCraft game in the form of a website.",
  "body": "# Vitajte v pomocníkovi pre hru XposeCraft\r\nHra **[XposeCraft](https://github.com/scscgit/XposeCraft)** nie je obyčajná (zábavná) hra podobná hrám, ktoré sa ovládajú klávesnicou a myšou. Je to náučné prostredie určené na výučbu programovania v jazyku C#. Hru je potrebné hrať písaním zdrojového kódu robota, ktorý sa následne s hrou spojí a bude sa hrať samostatne. Ide o stratégiu, v ktorej je vašim cieľom zničiť všetky nepriateľské budovy skôr, než nepriateľ zničí tie vaše.\r\n\r\n# Inštalácia prostredia\r\nPre programovanie odporúčam buď bezplatné vývojárske prostredie **[Visual Studio Community](https://www.visualstudio.com/cs/downloads/)** od Microsoftu, alebo jednu z vhodných (lepších) alternatív, ktorou je nástroj od firmy JetBrains, keďže ho majú študenti k dispozícii zadarmo - **[Rider](https://www.jetbrains.com/rider/)**. V čase písania bol v stave Early Build.\r\n\r\n# Príprava prostredia\r\nJe potrebné stiahnuť súbory z tohto GitHub projektu. Najrýchlejší spôsob buď tlačidlo na vrchu tejto stránky, alebo na stránke <https://github.com/scscgit/XposeCraft-API-Test/> vpravo kliknúť na tlačidlo Clone or download a zvoliť voľbu Download ZIP, prípadne kliknúť [<sem>](https://github.com/scscgit/XposeCraft-API-Test/archive/master.zip). Druhou alternatívou je lokálne si projekt pomocou Gitu naklonovať. Následne vo vašom obľúbenom C# editore projekt spustíte, napríklad otvorením súboru s príponou .sln v koreňovom adresári projektu.\r\n\r\n***\r\n\r\n# Programátorské rozhranie hry (API)\r\nJazyk, v ktorom je napísaná samotná hra a ktorý sa používa aj na písanie robota sa volá **C#**. Existujú rôzne návody vo forme kníh alebo webstránok, príkladmi sú jedna **[anglická](https://www.tutorialspoint.com/csharp/csharp_basic_syntax.htm)** a jedna **[česká](http://programujte.com/clanky/34-serial-c/)** stránka, ktoré sa zaoberajú úplnými základmi. Platí ale, že väčšinou už prvé lekcie pracujú s funkciami z rámca .NET, akou je napríklad [`Console.WriteLine`](https://msdn.microsoft.com/en-us/library/system.console.writeline(v=vs.110).aspx). Počas programovania robota bude ale táto znalosť zbytočná, keďže sa neprogramuje aplikácia pre konzolu. Poskytujem ale podobnú funkcionalitu, ktorú je dobrovoľne možné využívať na písanie správ do výstupného logu zobrazovaného po spustení simulácie, napríklad cez `Log.i(object kontext, string sprava);`.\r\n\r\n## Písanie testov a overovanie úspešnosti\r\nPráca na vlastnom kóde robota prebieha výhradne v adresári (balíku) **[Test](https://github.com/scscgit/XposeCraft-API-Test/tree/master/XposeCraft%20API%20Test/Test)**, nachádzajúcom sa v adresári projektu. Obsahuje 3 triedy s fázami hry prebiehajúcimi v nasledujúcom poradí:\r\n* Economy - získavanie surovín,\r\n* Building - stavanie budov a jednotiek,\r\n* Battle - bojovanie s nepriateľom.\r\n\r\nNa voľbe umiestnenia kódu síce striktne nezáleží, ale dodržanie tejto štruktúry výrazne zlepší prehľadnosť kódu. Každá trieda obsahuje jednu hlavnú public void metódu, kde sa má nachádzať váš kód, a ktorá poskytuje cez vstupný parameter funkciu `startNextStage`, ktorej zavolanie ako `startNextStage();` spustí nasledujúcu fázu. Prvou fázou je teda EconomyStage. Okrem týchto tried je povolené ľubovoľné vytváranie ďalších tried. Príkladom je pripravená trieda `MyBot`.\r\n\r\nPo akejkoľvek zmene je možnosť projekt spustiť a nechať zbehnúť testy, čím sa overí ako správnosť syntaxe, tak aj správne využitie funkcií.\r\n\r\n**Upozornenie: Program je stále v testovacom štádiu, takže správnosť kódu nie je vôbec testovaná spoľahlivo, ide teda hlavne o kontrolu syntaxe - aby nebol odovzdaný úplne nepreložiteľný kód.**\r\n\r\n## Diagram Tried dostupného rozhrania\r\n\r\n[![Class Diagram](ClassDiagramGame.png)](ClassDiagramGame.png)\r\n\r\n## Návod ku programátorskému rozhraniu hry (API)\r\nAdresár (balíček) s poskytovaným API hry sa nazýva Game a na vyššie uvedenom obrázku sú znázornené všetky jeho časti. Táto sekcia obsahuje podrobný popis každej z nich, ale pozostáva iba z verejne viditeľných členov (public). Nadpis každej triedy obsahuje v zátvorke úplne jednoznačný názov, ktorý v prípade priloženia sekcie `using` nie je potrebné písať namiesto skráteného tvaru. Sekcia 'using' sa pre danú triedu vytvorí napríklad stlačením kombinácie kláves CTRL+BODKA vo Visual Studiu alebo ALT+ENTER pri používaní skratiek programu Rider nad názvom triedy v kóde a zvolením tejto voľby.\r\n\r\n### Trieda **Event** (XposeCraft_UI_API_Prototype_Test.Game.Event)\r\n\r\nDátové členy:\r\n* bool IsRegistered { get; }\r\n* EventType GameEvent { get; }\r\n* FunctionWithArguments Function { get; }\r\n\r\nDelegáty:\r\n* delegate void FunctionWithArguments(Arguments args);\r\n\r\nStatické metódy:\r\n* static Event Register(EventType gameEvent, FunctionWithArguments function)\r\n\r\nMetódy:\r\n* void UnregisterEvent()\r\n\r\nPoužitie:\r\n* Na získanie inštancie registrovanej udalosti (Eventu) sa používa iba statická metóda Register. Táto udalosť zaregistruje v systéme udalostí, čo spôsobí, že pokiaľ v hre kedykoľvek nastane zvolená udalosť typu EventType, vykoná sa funkcia, ktorej vstupom budú argumenty súvisiace s aktuálnou udalosťou. Ak sa už vykonávanie funkcie v hre nevyžaduje, inštanciu registrovanej udalosti je potrebné odstránit zavolaním jej metódy UnregisterEvent(). Pred použitím udalosti sa pre viac detailov obráťťe na jej dokumentáciu.\r\n\r\nPríklad:\r\n```c#\r\nvar event = Event.Register(EventType.EnemyUnitsOnSight, args => {\r\n\tforeach(Worker worker in UnitHelper.GetUnits<Worker>()) {\r\n\t\tworker.MoveTo(PlaceType.NearBase);\r\n\t}\r\n});\r\n\r\nevent.UnregisterEvent();\r\n```\r\n\r\n***\r\n\r\n# Úlohy\r\n### Scenár č. 1: Nastavenie vývojárskeho prostredia pre programovanie robota.  \r\n* S1.1. Nájdite a prečítajte si (tento) návod na hranie, obsahujúci diagram tried rozhrania.  \r\n* S1.2. Podľa návodu si nainštalujte vývojárske prostredie.  \r\n* S1.3. Stiahnite a otvorte si projekt hry vo vývojárskom prostredí, cez ktoré hru úspešne spustíte.  \r\n\r\n### Scenár č. 2: Splnenie základných úloh v rámci ekonomickej fázy hry pre získanie dostatočného množstva surovín.  \r\n* S2.1. Hru ste začali s jednou budovou BaseBuilding a jedným pracovníkom Worker. Pošlite pracovníka zbierať suroviny.  \r\n* S2.2. Čo najskôr ako to len bude možné, vytvorte štyroch ďalších pracovníkov a posielajte ich zbierať ďalšie suroviny.  \r\n\r\n### Scenár č. 3: Vytvorenie budovy a vytváranie jednotiek použitím nazbieraných surovín.  \r\n* S3.1. Počkajte, kým získate 150 minerálov a postavte prvú budovu NubianArmory blízko vašej prvej BaseBuilding.  \r\n* S3.2. Čo najskôr vytvorte 5 bojovníkov s názvom DonkeyGun.  \r\n\r\n### Scenár č. 4: Zaútočenie na nepriateľa.  \r\n* S4.1. Pošlite bojovníkov útočiť smerom k nepriateľovi a cestou útočte na nepriateľské jednotky.  \r\n* S4.2. Vylepšite stratégiu aby vaše jednotky prežili čo najdlhšie a vyberali si iba vhodné momenty na útok.  \r\n\r\n# Ukončenie testu\r\nPo vykonaní všetkých požadovaných testov stačí odovzdať váš zdrojový kód osobne dopredu dohodnutým spôsobom - stačí napríklad zazipovať adresár Test, keďže očakávam, že všetky zmeny nastali iba tam.\r\n\r\n# Diskusia\r\n{% include disqus.html %}",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}